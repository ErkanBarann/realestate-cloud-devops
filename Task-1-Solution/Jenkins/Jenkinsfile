pipeline {
    agent any

    parameters { 
        choice(name: 'ENVIRONMENT', choices: ['default', 'test', 'dev', 'prod'], description: 'Select the target environment')
        string(name: 'INSTANCE_TYPE', defaultValue: 't2.micro', description: 'AWS EC2 instance type')
        string(name: 'INSTANCE_COUNT', defaultValue: '1', description: 'Number of instances to deploy, must be a positive number')
    }

    environment {
        AWS_REGION = "us-east-1"
        KEY_PATH = "${params.ENVIRONMENT}.pem"
    }

    stages {
        stage('Create Key Pair') {
            steps {
                echo "üîê ${params.ENVIRONMENT} anahtar √ßifti olu≈üturuluyor"
                sh """
                    aws ec2 create-key-pair --region ${AWS_REGION} --key-name ${params.ENVIRONMENT} --query KeyMaterial --output text > ${KEY_PATH}
                    chmod 400 ${KEY_PATH}
                """
            }
        }

        stage('Create AWS Resources') {
            steps {
                echo "‚òÅÔ∏è AWS kaynaklarƒ± olu≈üturuluyor: ortam=${params.ENVIRONMENT}, t√ºr=${params.INSTANCE_TYPE}, adet=${params.INSTANCE_COUNT}"
                sh """
                    cd ../terraform
                    terraform init
                    terraform workspace select ${params.ENVIRONMENT} || terraform workspace new ${params.ENVIRONMENT}
                    terraform apply \
                        -var="ec2_type=${params.INSTANCE_TYPE}" \
                        -var="num_of_instance=${params.INSTANCE_COUNT}" \
                        -var="ec2_key=${params.ENVIRONMENT}" \
                        -auto-approve
                """
            }
        }
    }

    post {
        always {
            echo "üßπ Her durumda √ßalƒ±≈üacak blok (√∂r. loglama, cleanup vs.)"
        }

        success {
            echo "‚úÖ Ba≈üarƒ±lƒ±: AWS kaynaklarƒ± olu≈üturuldu"

            timeout(time: 30, unit: 'DAYS') {
                input message: "üßº Kaynaklarƒ± silmek ister misiniz?"
            }

            echo "üßπ Kaynaklar siliniyor"
            sh """
                aws ec2 delete-key-pair --region ${AWS_REGION} --key-name ${params.ENVIRONMENT}
                rm -f ${KEY_PATH}
                cd ../Terraform
                terraform destroy \
                    -var="ec2_type=${params.INSTANCE_TYPE}" \
                    -var="num_of_instance=${params.INSTANCE_COUNT}" \
                    -var="ec2_key=${params.ENVIRONMENT}" \
                    -auto-approve
            """
        }

        failure {
            echo "‚ùå Ba≈üarƒ±sƒ±zlƒ±k: Temizlik i≈ülemi ba≈ülatƒ±lƒ±yor"
            sh """
                aws ec2 delete-key-pair --region ${AWS_REGION} --key-name ${params.ENVIRONMENT} || true
                rm -f ${KEY_PATH} || true
                cd ../Terraform
                terraform destroy \
                    -var="ec2_type=${params.INSTANCE_TYPE}" \
                    -var="num_of_instance=${params.INSTANCE_COUNT}" \
                    -var="ec2_key=${params.ENVIRONMENT}" \
                    -auto-approve || true
            """
        }
    }
}
